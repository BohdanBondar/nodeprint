<?php!defined('BASEPATH') && exit('No direct script access allowed');/** * NodePrint * * Simple and Elegant Forum Software * * @package         NodePrint * @author          airyland <i@mao.li> * @copyright       Copyright (c) 2013, mao.li * @license         MIT * @link            https://github.com/airyland/nodeprint * @version         0.0.5 *//** * 帖子 Model *  * 网站帖子相关操作Model  *  * @subpackage Model */class Post extends CI_Model {    /**     * Topic Table     */    const POST_TABLE = 'post';    /**     * Node Table     */    const NODE_TABLE = 'node';    /**     * Comment Table     */    const CM_TABLE = 'comment';    /**     * Follow Table     */    const FOLLOW_TABLE = 'follow';    /**     * Rating Table     */    const RATE_TABLE = 'rate';    /**     * Temp Table     */    const TEMP_TABLE='temp';    /**     * 参数 user_id 的可选类型     *      * @access private     * @var array     */    private $user_type = array('user_id', 'user_name');    /**     * 参数 node_id 的可选类型     *      * @access private     * @var array     */    private $node_type = array('node_id', 'node_slug');    /**     * 排序可选字段     *      * @access private     * @var array     */    private $order_by = array('post_last_comment', 'post_last_comment', 'post_comment_no', 'post_id', 'post_hit');    /**     * 排序方式     *      * @access private     * @var array     */    private $order = array('DESC', 'ASC');    function __construct() {        parent::__construct();    }    /**     * 解析字符串参数     *      * 类wordpress查询的方式 方便调用查询接口     * @access public     * @param string $string 查询字符串     * @return array      * @todo 参数解析 取值范围确定     */    public function query_post($string) {        $params = array();        parse_str($string, $params);        $user_id = isset($params['user_id']) ?$params['user_id'] : 0;        // user_type 只有 user_id 及 user_name        $user_type = isset($params['user_type']) && in_array($params['user_type'], $this->user_type) ? $params['user_type'] : 'user_id';        $node_id = isset($params['node_id']) && intval($params['node_id']) > 0 ? intval($params['node_id']) : 0;        // node_type 只有 node_id 及 node_slug        $node_type = isset($params['node_type']) && in_array($params['node_type'], $this->node_type) ? $params['node_type'] : 'node_id';        // order_by 有 post_last_comment post_comment_no post_id post_hit        $order_by = isset($params['order_by']) && in_array($params['order_by'], $this->order_by) ? $params['order_by'] : 'post_id';        // order 只有 DESC 及 ASC        $order = isset($params['order']) && in_array($params['order'], $this->order) ? $params['order'] : 'DESC';        // page 从1开始        $page = isset($params['page']) && intval($params['page']) > 0 ? $params['page'] : 1;        // no 要大于1        $no = isset($params['no']) && intval($params['no'] > 0) ? $params['no'] : 15;        // TRUE 或者 FALSE        $count = isset($params['count']) ? (bool) $params['count'] : FALSE;        //是否排除不上首页节点        $all=  isset($params['all']) ? FALSE : TRUE;        return $this->list_post($user_id, $user_type, $node_id, $node_type, $order_by, $order, $page, $no, $count, $all);    }    /**     * query the post     *      * @access private     * @param int $user_id     * @param string $user_type     * @param mixed $node_id     * @param string $node_type     * @param string $order_by     * @param string $order     * @param int $page     * @param int $no     * @param bool $count     * @param bool $all     * @return mixed     */    private function list_post($user_id = 0, $user_type = 'user_id', $node_id = 0, $node_type = 'node_id', $order_by = 'post_id', $order = 'DESC', $page = 1, $no = 20, $count = FALSE, $all = TRUE) {        $this->db->from(self::POST_TABLE);        if ($user_id){            $this->db->where($user_type, $user_id);        }        if ($node_id&&$node_type==='node_id'){            $this->db->where(self::POST_TABLE.'.' . $node_type, $node_id);        }        if($node_id&&$node_type==='node_slug'){            $this->db->join(self::NODE_TABLE, self::POST_TABLE.'.node_slug='.self::NODE_TABLE.'.node_id');        }        $this->db->join(self::NODE_TABLE, self::POST_TABLE.'.node_id='.self::NODE_TABLE.'.node_id');         if (!$all){             $this->db->where(self::NODE_TABLE.'.node_onindex', '1');         }        if ($count){            return $this->db->count_all_results();        }        $post =$this->db->order_by($order_by, $order)                ->limit($no, count_offset($page, $no))                ->get();        return $post->num_rows() > 0 ? $post->result_array() : 0;    }    public function check_post($post_id) {        return $this->db->where('post_id', $post_id)->get(self::POST_TABLE)->num_rows() > 0 ? TRUE : FALSE;    }    /**     * 添加帖子     * @param int $post_title 帖子标题     * @param string $post_content 帖子内容     * @param int $user_id  用户id     * @param string $user_name 用户名     * @param int $node_id 节点id     * @return int 帖子id     */    public function add_post($post_title, $post_content, $user_id, $user_name, $node_id,$raw_content='') {        $data = array(            'post_title' => $post_title,            'post_content' => $post_content,            'user_id' => $user_id,            'user_name' => $user_name,            'post_time' => current_time(),            'post_comment_no' => 0,            'post_last_comment' => current_time(),            'node_id' => $node_id,            'post_hit' => 0        );        $this->db->insert(self::POST_TABLE, $data);        $insert_id=$this->db->insert_id();        $this->save_meta(array('t_type'=>'topic','t_keyid'=>$insert_id,'t_content'=>$raw_content));        return $insert_id;    }    /**     * 获取用户评论过的帖子     *      * @access public     * @param int $user_id     * @param string $user_field     * @param int $page      * @param int $no     * @param bool $count     * @return array | 0     */    public function list_user_comment_post($user_id, $user_field = 'user_id', $page = 1, $no = 10, $count = FALSE) {        $this->db->select('cm_content,cm_time,'.self::CM_TABLE.'.user_id,'.self::CM_TABLE.'.user_name,'.self::CM_TABLE.'.post_id,'.self::POST_TABLE.'.post_title,post_hit,post_time,'.self::POST_TABLE.'.node_id,node_name,node_slug,post_last_comment_author,post_last_comment,post_comment_no')                ->from(self::CM_TABLE)                ->where(self::CM_TABLE.'.' . $user_field, $user_id)                ->join(self::POST_TABLE, self::POST_TABLE.'.post_id='.self::CM_TABLE.'.post_id', 'left')                ->join(self::NODE_TABLE, self::POST_TABLE.'.node_id='.self::NODE_TABLE.'.node_id')                ->distinct();        if ($count)            return $this->db->count_all_results();        $rs = $this->db->order_by('cm_id', 'DESC')->limit($no, count_offset($page, $no))->get();        return $rs->num_rows() > 0 ? $rs->result_array() : 0;    }    /**     * 查询帖子信息     * @param int $post_id     * @return array | 0     */    public function post_info($post_id) {        $rs = $this->db->from(self::POST_TABLE)                ->where('post_id', $post_id)                ->join(self::NODE_TABLE, self::POST_TABLE.'.node_id='.self::NODE_TABLE.'.node_id')                ->get();        return $rs->num_rows() > 0 ? $rs->row_array() : 0;    }    /**     * 记录点击量     *      * @access public     * @param int $post_id     */    public function add_post_hit($post_id) {        $this->db->set('post_hit', 'post_hit+1', FALSE)->where('post_id', $post_id)->update(self::POST_TABLE);    }    /**     * 删除帖子     *      * @access public     * @param int $post_id     * @todo 相应的评论也应该删除     */    public function delete_post($post_id) {        $this->db->where('post_id', $post_id)->delete(self::POST_TABLE);        $this->load->model('comment');        $this->comment->del_comment($post_id, true);    }    /**     * 转移帖子到其他节点     *      * @access public     * @param int $post_id     * @param int|string $node     * @param string $type     * @return boolean     * @todo 移动帖子时相应节点的帖子数量要更新     */    function transfer_post($post_id, $node, $type = 'node_name') {        $rs = $this->db->where($type, $node)->get(self::NODE_TABLE);        if (!$rs->num_rows() > 0)            return FALSE;        $node = $rs->row_array();        $this->db->set('node_id', $node['node_id'])//->set('node_name', $node['node_name'])->set('node_slug', $node['node_slug'])                ->where('post_id', $post_id)->update(self::POST_TABLE);        return TRUE;    }    /**     * check if has faved a post     * @param int $user_id     * @param int $post_id     * @return boolean     */    function check_post_fav($user_id, $post_id) {        return $this->db->where('user_id', $user_id)                        ->where('f_keyid', $post_id)                        ->where('f_type', 1)                        ->get(self::FOLLOW_TABLE)                        ->num_rows() > 0 ? TRUE : FALSE;    }    function count_post($user, $user_type = 'user_name') {        return $this->db->from(self::POST_TABLE)->where($user_type, $user)->count_all_results();    }    /**     * 获取搜索结果     * @param string $key 搜索词     * @param int $page 分类页数     * @param int $no 分类条数     * @param boolean $count 是否只计数     * @return array|0      */    function search_post($key, $page = 1, $no = 15, $count = false) {        if ($count == true)            return $this->db->from(self::POST_TABLE)->like('post_title', $key)->count_all_results();        $rs = $this->db->from(self::POST_TABLE)->like('post_title', $key)                ->join(self::NODE_TABLE, self::NODE_TABLE.'.node_id='.self::POST_TABLE.'.node_id')                ->order_by('post_id', 'DESC')                ->limit($no, count_offset($page, $no))                ->get();        return $rs->result_array();    }    /**     * 帖子沉降rank计算     * @param int $post_id 帖子id     * @param string      * @param int $user_id 用户id     * @return void     */    function rate_post($post_id, $rate, $user_id) {        if (!$this->check_user_rate($user_id, $post_id)) {            $field = 'post_' . $rate;            $val = $field . ($rate === 'up') ? '+1' : '-1';            $this->db->set($field, $field . $val, false)                    ->where('post_id', $post_id)                    ->update(self::POST_TABLE);            $this->add_rate_log($user_id, $post_id);        }    }    /**     * rank 记录     * @param int $user_id     * @param int $post_id     * @return void     */    function add_rate_log($user_id, $post_id) {        //check if user id has existed        $rs = $this->db->select('post_id')->from(self::RATE_TABLE)->where('user_id', $user_id);        $is_existed = ($rs->count_all_results() > 0) ? TRUE : FALSE;        if (!$is_existed) {            $this->db->insert(self::RATE_TABLE, array('user_id' => $user_id, 'post_id' => $post_id));            exit;        }        if ($this->check_user_rate($user_id, $post_id))            exit;        $post_data = $rs->get_where(self::RATE_TABLE, array('user_id' => $user_id))->row()->post_id;        $this->db->set('post_id', $post_data . ',' . $post_id)                ->where('user_id', $user_id)                ->update(self::RATE_TABLE);    }    /**     * 用户是否对该帖子进行过评分     * @param int $user_id 用户id     * @param int $post_id 帖子id     * @return bool     */    function check_user_rate($user_id, $post_id) {        $rs = $this->db->where('user_id', $user_id)->get(self::RATE_TABLE);        $o_post_id = $rs->row()->post_id;        if ($post_id != '') {            $post_data = explode(',', $o_post_id);            if (in_array($post_id, $post_data))                return TRUE;        }        return FALSE;    }    /**     * count post weight for index list     * @abstract the elements that affect the weight including     * post time, post comment, post fav,      * @param int $post_id     * @return @void     * @todo 完善排名     */    function count_post_weight() {            }    /**     * 查询帖子收藏数     * @param int $post_id     * @return void     */    function get_post_fav_no($post_id) {        $no = $this->db->from(self::FOLLOW_TABLE)                ->where('f_type', 1)                ->where('f_keyid', $post_id)                ->count_all_results();        $this->db->update(self::POST_TABLE, array('post_fav_no_cache' => $no), array('post_id' => $post_id));    }    /**     * add meta data     *     * @param array $data     * @return bool     */    function save_meta($data){        $this->db->insert(self::TEMP_TABLE,$data);        return $this->db->affected_rows()>0;    }}/* End of file post.php *//* Location: ./application/models/post.php */